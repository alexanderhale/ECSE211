/*
 * OdometryCorrection.java
 */
package ca.mcgill.ecse211.odometerlab;

import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.NXTLightSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.Color;
import lejos.robotics.SampleProvider;

public class OdometryCorrection extends Thread {
  private static final long CORRECTION_PERIOD = 10;
  private Odometer odometer;
  private float[] lsData;
  private static final Port lsPort = LocalEV3.get().getPort("S1");
  private static final int blackValue = 500;	// TODO: FINE-TUNE THIS. THIS IS AN ESTIMATE
  private static final double sensorToAxle = 3.25;	// TODO: fine-tune this. Only measured once
  
  // constructor
  public OdometryCorrection(Odometer odometer) {
    this.odometer = odometer;
    
    @SuppressWarnings("resource") // Because we don't bother to close this resource
    SensorModes lsSensor = new EV3ColorSensor(lsPort);
    SampleProvider lsReading = lsSensor.getMode("Red");
    lsData = new float[lsReading.sampleSize()];
  }

  // run method (required for Thread)
  public void run() {
    long correctionStart, correctionEnd;
    boolean lineFound = false; // track whether we've hit a line or not
    while (true) {
      correctionStart = System.currentTimeMillis();
      
      // get light value
      int lightValue = (int)lsData[0];
      
      // check if the light value indicates black (i.e. a line)
      if (lightValue <= blackValue && !lineFound) {
    	  // get heading
    	  double theta = odometer.getTheta();
    	  
    	  // check which direction we just crossed
    	  
    	  if ((theta >= Math.PI/4 && theta < 3*Math.PI/4) || (theta >= 5*Math.PI/4 && theta < 7*Math.PI/4)) {
    		  // we've crossed a line while heading the Y direction!
    		  Sound.playNote(Sound.FLUTE, 440, 250);
    		  // calculate how far the axle is from the line
    		  
    	  }
      }
      
      // this ensure the odometry correction occurs only once every period
      correctionEnd = System.currentTimeMillis();
      if (correctionEnd - correctionStart < CORRECTION_PERIOD) {
        try {
          Thread.sleep(CORRECTION_PERIOD - (correctionEnd - correctionStart));
        } catch (InterruptedException e) {
          // there is nothing to be done here because it is not
          // expected that the odometry correction will be
          // interrupted by another thread
        }
      }
    }
  }
}
