package ca.mcgill.ecse211.Navigation;

import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class NavigatorAvoid extends Thread implements UltrasonicController {

  /* Constants */
  private static final int MOTOR_SPEED = 200;
  private static final int FILTER_OUT = 35;

  private final int bandCenter;
  private final int bandWidth;
  private int distance;
  private int filterControl;
  private int tooCloseControl;
  private int error_constant = 6;  //10
  
  public NavigatorAvoid(int bandCenter, int bandwidth) {
    this.bandCenter = bandCenter;
    this.bandWidth = bandwidth;
    this.filterControl = 0;
    this.tooCloseControl = 0;

    Lab3.leftMotor.setSpeed(MOTOR_SPEED); // Initialize motor rolling forward
    Lab3.rightMotor.setSpeed(MOTOR_SPEED);
    Lab3.leftMotor.forward();
    Lab3.rightMotor.forward();
  }

  @Override
  public void processUSData(int distance) {
    // rudimentary filter - toss out invalid samples corresponding to null signal
	  
    if ((distance >= 255 && filterControl < FILTER_OUT) || (distance > 20000)) {
      // bad value, do not set the distance var, do increment the filter value
      this.filterControl++;
    } else if (distance >= 255) {
      // We have repeated large values, so there must actually be nothing
      // there: leave the distance alone
      this.distance = distance;
    } else {
      // distance went below 255: reset filter and leave
      // distance alone.
      this.filterControl = 0;
      this.distance = distance;
    }

    // TODO: process a movement based on the us distance passed in (P style)
    // ASSUME COUNTERCLOCKWISE MOVEMENT
    // RIGHT (inner) MOTOR IS CONNECTED TO PORT D AND HAS A BLUE PIN ON TOP
    int error = Math.abs(this.distance - bandCenter);
	int speed_adjustment = error_constant*error; 
	if (speed_adjustment > 175){
		// set the limit for max. of adjustSpeed
		speed_adjustment = 175;
	}
	
	if (this.distance > bandCenter + (bandWidth/2)) {
		Lab3.rightMotor.forward();
		Lab3.leftMotor.forward();
		// proportionally increase speed of outer wheel
    	Lab3.rightMotor.setSpeed(MOTOR_SPEED + speed_adjustment);
    	Lab3.leftMotor.setSpeed(MOTOR_SPEED - (speed_adjustment/6));
    } else if (this.distance < bandCenter - (bandWidth/2) && this.distance >= 10) {
		Lab3.rightMotor.forward();
		Lab3.leftMotor.forward();
    	// proportionally increase speed of inner wheel
    	Lab3.rightMotor.setSpeed(MOTOR_SPEED - (speed_adjustment/6));
    	Lab3.leftMotor.setSpeed(MOTOR_SPEED + speed_adjustment);
    } else if (this.distance < 20) {
    	// much too close, pivot. Filter to make sure it isn't an erroneous reading. 10
    	if (this.tooCloseControl < 2) {
    		this.tooCloseControl++;
    	} else {
    		this.tooCloseControl = 0;
    		Lab3.rightMotor.backward();
    		Lab3.leftMotor.forward();
    		Lab3.leftMotor.setSpeed(MOTOR_SPEED / 2);
        	Lab3.rightMotor.setSpeed(MOTOR_SPEED / 2);
    	}
    } else {
		Lab3.rightMotor.forward();
		Lab3.leftMotor.forward();
    	// distance is on track
    	Lab3.leftMotor.setSpeed(MOTOR_SPEED);
    	Lab3.rightMotor.setSpeed(MOTOR_SPEED);
    }
  }

  @Override
  public int readUSDistance() {
    return this.distance;
  }
  
  
  
  
  
  
  
  
  
  
  
    private Odometer odometer;
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	boolean navigating;
	private static final long ODOMETER_PERIOD = 25; /*odometer update period, in ms*/
	
	// constants
	private int FORWARD_SPEED = 200;
	private int ROTATE_SPEED = 100;
	private double axleWidth, wheelRadius;	// passed in on system startup
	private double thetaNow, xNow, yNow;	// current heading
	private double gridLength = 30.48;
	TextLCD t;
	
	public NavigatorAvoid (Odometer odometer, EV3LargeRegulatedMotor leftMotor,EV3LargeRegulatedMotor rightMotor,
			double axleWidth, double wheelRadius){
		this.odometer = odometer;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.axleWidth = axleWidth;
		this.wheelRadius = wheelRadius;
		leftMotor.setAcceleration(500);
		rightMotor.setAcceleration(500);
		navigating = false;
		
		t = LocalEV3.get().getTextLCD();
	}
	
	public void run() {
		long updateStart, updateEnd;
		while (true) {
			updateStart = System.currentTimeMillis();
			
			getCoordinates();
			
			// this ensures that the odometer only runs once every period
		      updateEnd = System.currentTimeMillis();
		      if (updateEnd - updateStart < ODOMETER_PERIOD) {
		        try {
		          Thread.sleep(ODOMETER_PERIOD - (updateEnd - updateStart));
		        } catch (InterruptedException e) {
		          // there is nothing to be done here because it is not
		          // expected that the odometer will be interrupted by
		          // another thread
		        }
		      }
		}
		
	}
	
	public void travelTo(double x, double y) {	
		// getCoordinates();
		x *= gridLength;
		y *= gridLength;
		
		double deltaX = x - xNow;
		double deltaY = y - yNow;
		
		// calculate distance between current position and next coordinate
		double distanceToNext = Math.hypot(deltaX, deltaY);
		
		// calculate angle between current position and next coodinate
		double thetaToNextPoint = Math.atan2(deltaX, deltaY) - thetaNow;
		
		// ensure the robot rotates the least amount necessary
		if (thetaToNextPoint > Math.PI) {
			thetaToNextPoint -= 2*Math.PI;
		} else if (thetaToNextPoint < -(Math.PI)){
			thetaToNextPoint += 2*Math.PI;
		}
		
		turnTo(thetaToNextPoint);
		
		leftMotor.setAcceleration(500);
		rightMotor.setAcceleration(500);
		leftMotor.setSpeed(FORWARD_SPEED);
		rightMotor.setSpeed(FORWARD_SPEED);
		
		navigating = true;
		leftMotor.forward();
		rightMotor.forward();
		
		leftMotor.rotate(convertDistance(wheelRadius,distanceToNext), true);
		rightMotor.rotate(convertDistance(wheelRadius,distanceToNext), false);
		
		leftMotor.stop();
		rightMotor.stop();
		
		navigating = false;
	}
	
	public void turnTo(double theta) {	
		// slow down
		leftMotor.setSpeed(ROTATE_SPEED);
		rightMotor.setSpeed(ROTATE_SPEED);
		
		//convert to degrees
		theta = Math.toDegrees(theta);
		
		t.clear();
		t.drawString("theta: " + theta, 0, 5);
		
		//turn to calculated angle
		int rotation = convertAngle(wheelRadius, axleWidth, theta);
		
		navigating = true;
		// rotate the appropriate direction (sign on theta accounts for direction
		leftMotor.rotate(rotation, true);
		rightMotor.rotate(-rotation, false);
		navigating = false;
		
		leftMotor.stop();
		rightMotor.stop();
	}
	
	public boolean isNavigating() {
		return navigating;
	}
	
	public void getCoordinates() {
		// synchronize robot's current position
	 	synchronized (odometer.lock) {
			thetaNow = odometer.getTheta();
			xNow = odometer.getX();
			yNow = odometer.getY();
		}
	}
	
	// calculation methods
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}
	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
}