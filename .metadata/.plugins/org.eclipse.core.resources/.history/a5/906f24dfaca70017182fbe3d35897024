package ca.mcgill.ecse211.Navigation;

import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class NavigatorAvoid extends Thread implements UltrasonicController {
	
	private Odometer odometer;
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	boolean navigating;
	private static final long ODOMETER_PERIOD = 25; /*odometer update period, in ms*/
	
	// constants
	private int FORWARD_SPEED = 200;
	private int ROTATE_SPEED = 100;
	private double axleWidth, wheelRadius;	// passed in on system startup
	private double thetaNow, xNow, yNow;	// current heading
	private double gridLength = 30.48;
	private boolean avoidingWall = false;
	private int filterCount = 0;
	private int[] filterStorage = new int[5];
	
	// variables
	private int distance;
	private double avgDistance = 20;
	
	public NavigatorAvoid (Odometer odometer, EV3LargeRegulatedMotor leftMotor,EV3LargeRegulatedMotor rightMotor,
			double axleWidth, double wheelRadius){
		this.odometer = odometer;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.axleWidth = axleWidth;
		this.wheelRadius = wheelRadius;
		leftMotor.setAcceleration(500);
		rightMotor.setAcceleration(500);
		navigating = false;
	}
	
	public void run() {
		long updateStart, updateEnd;
		while (true) {
			updateStart = System.currentTimeMillis();
			
			getCoordinates();
			
			// this ensures that the odometer only runs once every period
		      updateEnd = System.currentTimeMillis();
		      if (updateEnd - updateStart < ODOMETER_PERIOD) {
		        try {
		          Thread.sleep(ODOMETER_PERIOD - (updateEnd - updateStart));
		        } catch (InterruptedException e) {
		          // there is nothing to be done here because it is not
		          // expected that the odometer will be interrupted by
		          // another thread
		        }
		      }
		}
	}
	
	public void travelTo(double x, double y) {	
		// getCoordinates();
		x *= gridLength;
		y *= gridLength;
		
		double deltaX = x - xNow;
		double deltaY = y - yNow;
		
		// calculate distance between current position and next coordinate
		double distanceToNext = Math.hypot(deltaX, deltaY);
		
		// calculate angle between current position and next coodinate
		double thetaToNextPoint = Math.atan2(deltaX, deltaY) - thetaNow;
		
		// ensure the robot rotates the least amount necessary
		if (thetaToNextPoint > Math.PI) {
			thetaToNextPoint -= 2*Math.PI;
		} else if (thetaToNextPoint < -(Math.PI)){
			thetaToNextPoint += 2*Math.PI;
		}
		
		turnTo(thetaToNextPoint);
		
		leftMotor.setAcceleration(500);
		rightMotor.setAcceleration(500);
		leftMotor.setSpeed(FORWARD_SPEED);
		rightMotor.setSpeed(FORWARD_SPEED);
		
		navigating = true;
		leftMotor.forward();
		rightMotor.forward();
		
		leftMotor.rotate(convertDistance(wheelRadius,distanceToNext), true);
		rightMotor.rotate(convertDistance(wheelRadius,distanceToNext), false);
		
		
		
		
		/////////////////////////////////
		double initialTheta = 0;
		while((leftMotor.isMoving() && rightMotor.isMoving()) || avoidingWall) {
			if (avoidingWall) {
				if (initialTheta - thetaNow >= 100) {
		    		System.out.println("Theta statement");

		    		leftMotor.stop(true);
		    		rightMotor.stop(true);
		    		avoidingWall = false;
		    		break;
		    	} else {
		    		// bang bang controlling
				    if (avgDistance <= 10) {
				    	System.out.println("less than 15");
				    	leftMotor.setSpeed(FORWARD_SPEED); // Start robot moving forward
				        rightMotor.setSpeed(FORWARD_SPEED);
				        leftMotor.forward();
				        rightMotor.backward();
				    } else if (avgDistance > 17 && avgDistance < 27) {
				    	System.out.println("between 25 and 35");
				        leftMotor.setSpeed(FORWARD_SPEED); // Start robot moving forward
				        rightMotor.setSpeed(FORWARD_SPEED);
				        leftMotor.forward();
				        rightMotor.forward();
				  	} else if (avgDistance >= 17) {
				        leftMotor.setSpeed(110); // Left turn
				        rightMotor.setSpeed(FORWARD_SPEED-10);//motorLow-20
				        leftMotor.forward();
				        rightMotor.forward();
				    } else if (avgDistance <= 27){
				        leftMotor.setSpeed(FORWARD_SPEED); // Right turn
				        rightMotor.setSpeed(100);
				        leftMotor.forward();
				        rightMotor.forward();
				    }
		    	}
			}
			
			if(avgDistance <= 8 && !avoidingWall) {
				System.out.println("Obstacle detected");
				avoidingWall = true;
				initialTheta = thetaNow;
				turnTo(90);
			}
		}
		//////////////////////////////////////////////
		
		
		leftMotor.stop();
		rightMotor.stop();
		
		navigating = false;
	}
	
	public void turnTo(double theta) {	
		// slow down
		leftMotor.setSpeed(ROTATE_SPEED);
		rightMotor.setSpeed(ROTATE_SPEED);
		
		//convert to degrees
		theta = Math.toDegrees(theta);
		
		//turn to calculated angle
		int rotation = convertAngle(wheelRadius, axleWidth, theta);
		
		navigating = true;
		// rotate the appropriate direction (sign on theta accounts for direction
		leftMotor.rotate(rotation, true);
		rightMotor.rotate(-rotation, false);
		navigating = false;
		
		leftMotor.stop();
		rightMotor.stop();
	}
	
	public boolean isNavigating() {
		return navigating;
	}
	
	public void getCoordinates() {
		// synchronize robot's current position
	 	synchronized (odometer.lock) {
			thetaNow = odometer.getTheta();
			xNow = odometer.getX();
			yNow = odometer.getY();
		}
	}
	
	// calculation methods
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}
	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, Math.PI * width * angle / 360.0);
	}
	
	@Override
	public void processUSData(int distance) {
		distance = Math.min(distance, 100);
		this.filterCount++;
	    if(this.filterCount == 3) {
	    	this.filterCount = 0;
	    }
	    // average last 5 values to filter out erroneus readings
	    
	    filterStorage[filterCount] = distance;
	    
	    int avgDistance = 0;
	    for (int i = 0; i < filterStorage.length; i++) {
	    	avgDistance += filterStorage[i];
	    }
	    avgDistance /= 5; 
	    
	    if (avoidingWall) {
	    	this.avgDistance = avgDistance / Math.sqrt(2);
	    } else {
	    	this.avgDistance = avgDistance;
	    }
	    
	    this.distance = avgDistance;
	  }

	@Override
	public int readUSDistance() {
		return this.distance;
	}
}